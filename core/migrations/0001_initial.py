# -*- coding: utf-8 -*-
# Generated by Django 1.11.3 on 2017-12-13 15:03
from __future__ import unicode_literals

import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='BiodiversityLoss',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_of_trigger', models.CharField(choices=[('E', 'Ecosystem'), ('T', 'Threatened or protected species populations/individuals')], max_length=1)),
                ('name', models.CharField(blank=True, help_text='The name of the ecosystem or protected species.', max_length=200, null=True)),
                ('size', models.IntegerField(blank=True, help_text='This is the area in hectares relevant to this trigger (e.g. 20 ha of pristine renosterveld will be destroyed).', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Development',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('use', models.CharField(choices=[('AG', 'Agriculture'), ('BU', 'Business'), ('CO', 'Commercial'), ('GO', 'Government'), ('GP', 'Government purposes'), ('IN', 'Industrial'), ('MI', 'Mining'), ('MU', 'Multi-use (public, residential, commercial)'), ('RC', 'Recreational'), ('RE', 'Residential'), ('TR', 'Transport'), ('UN', 'Unknown')], help_text='Choose all types of development that form part of the application.', max_length=2)),
                ('footprint', django.contrib.gis.db.models.fields.MultiPolygonField(blank=True, help_text='Should be a .geojson file.', null=True, srid=4326)),
                ('location_description', models.TextField(blank=True, help_text='A description of the locality of the development.', null=True)),
                ('developer', models.CharField(blank=True, help_text='The name of the development company who applied for the permit?', max_length=100, null=True)),
                ('code', models.CharField(blank=True, help_text="This is SANBI's ID code for this development.", max_length=200, null=True)),
                ('start_date', models.DateField(blank=True, help_text='The day on which development is due to start.', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Offset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(blank=True, choices=[('HE', 'Hectares'), ('RE', 'Research'), ('RH', 'Rehabilitation'), ('FI', 'Financial compensation')], help_text='The type of offset.', max_length=2, null=True)),
                ('polygon', django.contrib.gis.db.models.fields.MultiPolygonField(blank=True, null=True, srid=4326)),
                ('duration', models.CharField(choices=[('PE', 'Perpetuity'), ('US', 'Unspecified'), ('UN', 'Unknown'), ('LT', '< 20 years'), ('TF', 'Between 20 and 50 years'), ('HC', '> 50 years')], help_text='The length of time the offset should endure for. This does not make sense for certain options.', max_length=2)),
                ('offset_met', models.CharField(choices=[('ME', 'Yes, this offset has been met'), ('LA', 'No, this offset has not been met and the time has lapsed, it is outstanding.'), ('IP', 'No, this offset has not yet been met but the development is still in progress.'), ('NU', 'No, this offset has not been met for reasons unknown.'), ('UN', "We don't know if this offset has been met or not.")], help_text='The status of the offset requirement (whether it has been met or not).', max_length=1)),
            ],
        ),
        migrations.CreateModel(
            name='OffsetImplementationTime',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Permit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reference_no', models.CharField(blank=True, help_text='The reference number for the permit.', max_length=200, null=True)),
                ('date_issued', models.DateField(blank=True, help_text='The date this permit was issued.', null=True)),
                ('case_officer', models.CharField(blank=True, help_text='The name of the case officer dealing with the permit.', max_length=100, null=True)),
                ('application_title', models.CharField(blank=True, help_text="Should describe what the development is, e.g. 'Establishment of the Northern Golf Course Estate, Johannesburg Gauteng'.", max_length=500, null=True)),
                ('activity_description', models.TextField(blank=True, help_text="Provides more detail on what the development will entail, e.g. 'The development proposal will comprise of the following: Residential, internal roads, and access control.'", null=True)),
                ('environmental_consultancy', models.CharField(blank=True, help_text='The name of the consultancy who performed the EIA', max_length=100, null=True)),
                ('environmental_assessment_practitioner', models.CharField(blank=True, help_text='The name of the staff member in the above consultancy.', max_length=100, null=True)),
                ('offset_requirement_stipulated', models.CharField(choices=[('Y', 'Yes'), ('D', "No, the offset hasn't been determined"), ('P', 'No, not publicised')], help_text='Choose all types of development that form part of the application.', max_length=2)),
                ('development', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Development')),
            ],
        ),
        migrations.CreateModel(
            name='PermitName',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the permit - e.g. Water Use License (WULA).', max_length=100)),
                ('authority', models.CharField(help_text='Name of the authority who issues the permit - e.g. Department of Water Affairs.', max_length=100)),
            ],
        ),
        migrations.AlterUniqueTogether(
            name='permitname',
            unique_together=set([('name', 'authority')]),
        ),
        migrations.AddField(
            model_name='permit',
            name='permit_name',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.PermitName'),
        ),
        migrations.AddField(
            model_name='offset',
            name='implementation_times',
            field=models.ManyToManyField(help_text='When this offset was supposed to be implemented. ', to='core.OffsetImplementationTime'),
        ),
        migrations.AddField(
            model_name='offset',
            name='permit',
            field=models.ForeignKey(help_text='The permit this offset belongs to.', on_delete=django.db.models.deletion.CASCADE, to='core.Permit'),
        ),
        migrations.AddField(
            model_name='biodiversityloss',
            name='development',
            field=models.ForeignKey(help_text='The relevant development.', on_delete=django.db.models.deletion.CASCADE, to='core.Development'),
        ),
    ]
